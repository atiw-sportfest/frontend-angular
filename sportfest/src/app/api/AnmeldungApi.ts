/**
 * Sportfest Backend
 * Sportfest backend
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AnmeldungApi {

    protected basePath = 'https://sportfest.atiw.de/backend';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Anmeldung löschen
     * @param aid Anmeldungs-ID
     */
    public anmeldungAidDelete(aid: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.anmeldungAidDeleteWithHttpInfo(aid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Anmeldung anzeigen
     * @param aid Anmeldungs-ID
     */
    public anmeldungAidGet(aid: number, extraHttpRequestParams?: any): Observable<models.Anmeldung> {
        return this.anmeldungAidGetWithHttpInfo(aid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Anmeldungen anzeigen
     */
    public anmeldungGet(extraHttpRequestParams?: any): Observable<Array<models.Anmeldung>> {
        return this.anmeldungGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Anmeldungen hochladen
     * @param file Anmeldung als Excel-Datei
     */
    public anmeldungUploadPost(file: any, extraHttpRequestParams?: any): Observable<{}> {
        return this.anmeldungUploadPostWithHttpInfo(file, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Anmeldungen einer Disziplin anzeigen
     * @param did Disziplin-ID
     */
    public disziplinDidAnmeldungenGet(did: number, extraHttpRequestParams?: any): Observable<Array<models.Anmeldung>> {
        return this.disziplinDidAnmeldungenGetWithHttpInfo(did, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Anmeldungen einer Klasse anzuzeigen
     * @param kid Klassen-ID
     */
    public klasseKidAnmeldungenGet(kid: number, extraHttpRequestParams?: any): Observable<Array<models.Anmeldung>> {
        return this.klasseKidAnmeldungenGetWithHttpInfo(kid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Anmeldungen eines Schuelers anzuzeigen
     * @param sid Schueler-ID
     */
    public schuelerSidAnmeldungenGet(sid: number, extraHttpRequestParams?: any): Observable<Array<models.Anmeldung>> {
        return this.schuelerSidAnmeldungenGetWithHttpInfo(sid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Anmeldung löschen
     * 
     * @param aid Anmeldungs-ID
     */
    public anmeldungAidDeleteWithHttpInfo(aid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/anmeldung/${aid}'
                    .replace('${' + 'aid' + '}', String(aid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'aid' is not null or undefined
        if (aid === null || aid === undefined) {
            throw new Error('Required parameter aid was null or undefined when calling anmeldungAidDelete.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Anmeldung anzeigen
     * 
     * @param aid Anmeldungs-ID
     */
    public anmeldungAidGetWithHttpInfo(aid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/anmeldung/${aid}'
                    .replace('${' + 'aid' + '}', String(aid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'aid' is not null or undefined
        if (aid === null || aid === undefined) {
            throw new Error('Required parameter aid was null or undefined when calling anmeldungAidGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Anmeldungen anzeigen
     * 
     */
    public anmeldungGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/anmeldung';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Anmeldungen hochladen
     * 
     * @param file Anmeldung als Excel-Datei
     */
    public anmeldungUploadPostWithHttpInfo(file: any, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/anmeldung/upload';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'file' is not null or undefined
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling anmeldungUploadPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        headers.set('Content-Type', 'application/x-www-form-urlencoded');

        if (file !== undefined) {
            formParams.set('file', <any>file);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Anmeldungen einer Disziplin anzeigen
     * 
     * @param did Disziplin-ID
     */
    public disziplinDidAnmeldungenGetWithHttpInfo(did: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/disziplin/${did}/anmeldungen'
                    .replace('${' + 'did' + '}', String(did));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling disziplinDidAnmeldungenGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Anmeldungen einer Klasse anzuzeigen
     * 
     * @param kid Klassen-ID
     */
    public klasseKidAnmeldungenGetWithHttpInfo(kid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/klasse/${kid}/anmeldungen'
                    .replace('${' + 'kid' + '}', String(kid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'kid' is not null or undefined
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling klasseKidAnmeldungenGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Anmeldungen eines Schuelers anzuzeigen
     * 
     * @param sid Schueler-ID
     */
    public schuelerSidAnmeldungenGetWithHttpInfo(sid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schueler/${sid}/anmeldungen'
                    .replace('${' + 'sid' + '}', String(sid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sid' is not null or undefined
        if (sid === null || sid === undefined) {
            throw new Error('Required parameter sid was null or undefined when calling schuelerSidAnmeldungenGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
