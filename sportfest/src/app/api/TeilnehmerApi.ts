/**
 * Sportfest Backend
 * Sportfest backend
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TeilnehmerApi {

    protected basePath = 'https://sportfest.atiw.de/backend';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Klassen auflisten
     */
    public klasseGet(extraHttpRequestParams?: any): Observable<Array<models.Klasse>> {
        return this.klasseGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Klasse löschen
     * @param kid Klassen-ID
     */
    public klasseKidDelete(kid: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.klasseKidDeleteWithHttpInfo(kid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Ergebnisse einer Klasse fuer eine Disziplin anzeigen
     * @param did Disziplin-ID
     * @param kid Klassen-ID
     */
    public klasseKidErgebnisseDidGet(did: number, kid: number, extraHttpRequestParams?: any): Observable<Array<models.Ergebnis>> {
        return this.klasseKidErgebnisseDidGetWithHttpInfo(did, kid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Ergebnisse einer Klasse anzuzeigen
     * @param kid Klassen-ID
     */
    public klasseKidErgebnisseGet(kid: number, extraHttpRequestParams?: any): Observable<Array<models.Ergebnis>> {
        return this.klasseKidErgebnisseGetWithHttpInfo(kid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Klasse abrufen
     * @param kid Klassen-ID
     */
    public klasseKidGet(kid: number, extraHttpRequestParams?: any): Observable<models.Klasse> {
        return this.klasseKidGetWithHttpInfo(kid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Schueler einer Klasse anzuzeigen
     * @param kid Klassen-ID
     */
    public klasseKidSchuelerGet(kid: number, extraHttpRequestParams?: any): Observable<Array<models.Schueler>> {
        return this.klasseKidSchuelerGetWithHttpInfo(kid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Schueler auflisten
     */
    public schuelerGet(extraHttpRequestParams?: any): Observable<Array<models.Schueler>> {
        return this.schuelerGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Schueler löschen
     * @param sid Schueler-ID
     */
    public schuelerSidDelete(sid: number, extraHttpRequestParams?: any): Observable<{}> {
        return this.schuelerSidDeleteWithHttpInfo(sid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Ergebnisse eines Schuelers fuer eine Disziplin anzeigen
     * @param did Disziplin-ID
     * @param sid Schueler-ID
     */
    public schuelerSidErgebnisseDidGet(did: number, sid: number, extraHttpRequestParams?: any): Observable<Array<models.Ergebnis>> {
        return this.schuelerSidErgebnisseDidGetWithHttpInfo(did, sid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Ergebnisse eines Schuelers anzuzeigen
     * @param sid Schueler-ID
     */
    public schuelerSidErgebnisseGet(sid: number, extraHttpRequestParams?: any): Observable<Array<models.Ergebnis>> {
        return this.schuelerSidErgebnisseGetWithHttpInfo(sid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Schueler abrufen
     * @param sid Schueler-ID
     */
    public schuelerSidGet(sid: number, extraHttpRequestParams?: any): Observable<models.Schueler> {
        return this.schuelerSidGetWithHttpInfo(sid, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Klassen auflisten
     * 
     */
    public klasseGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/klasse';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Klasse löschen
     * 
     * @param kid Klassen-ID
     */
    public klasseKidDeleteWithHttpInfo(kid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/klasse/${kid}'
                    .replace('${' + 'kid' + '}', String(kid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'kid' is not null or undefined
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling klasseKidDelete.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Ergebnisse einer Klasse fuer eine Disziplin anzeigen
     * 
     * @param did Disziplin-ID
     * @param kid Klassen-ID
     */
    public klasseKidErgebnisseDidGetWithHttpInfo(did: number, kid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/klasse/${kid}/ergebnisse/${did}'
                    .replace('${' + 'did' + '}', String(did))
                    .replace('${' + 'kid' + '}', String(kid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling klasseKidErgebnisseDidGet.');
        }
        // verify required parameter 'kid' is not null or undefined
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling klasseKidErgebnisseDidGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Ergebnisse einer Klasse anzuzeigen
     * 
     * @param kid Klassen-ID
     */
    public klasseKidErgebnisseGetWithHttpInfo(kid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/klasse/${kid}/ergebnisse'
                    .replace('${' + 'kid' + '}', String(kid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'kid' is not null or undefined
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling klasseKidErgebnisseGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Klasse abrufen
     * 
     * @param kid Klassen-ID
     */
    public klasseKidGetWithHttpInfo(kid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/klasse/${kid}'
                    .replace('${' + 'kid' + '}', String(kid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'kid' is not null or undefined
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling klasseKidGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Schueler einer Klasse anzuzeigen
     * 
     * @param kid Klassen-ID
     */
    public klasseKidSchuelerGetWithHttpInfo(kid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/klasse/${kid}/schueler'
                    .replace('${' + 'kid' + '}', String(kid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'kid' is not null or undefined
        if (kid === null || kid === undefined) {
            throw new Error('Required parameter kid was null or undefined when calling klasseKidSchuelerGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Schueler auflisten
     * 
     */
    public schuelerGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schueler';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Schueler löschen
     * 
     * @param sid Schueler-ID
     */
    public schuelerSidDeleteWithHttpInfo(sid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schueler/${sid}/'
                    .replace('${' + 'sid' + '}', String(sid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sid' is not null or undefined
        if (sid === null || sid === undefined) {
            throw new Error('Required parameter sid was null or undefined when calling schuelerSidDelete.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Ergebnisse eines Schuelers fuer eine Disziplin anzeigen
     * 
     * @param did Disziplin-ID
     * @param sid Schueler-ID
     */
    public schuelerSidErgebnisseDidGetWithHttpInfo(did: number, sid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schueler/${sid}/ergebnisse/${did}'
                    .replace('${' + 'did' + '}', String(did))
                    .replace('${' + 'sid' + '}', String(sid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'did' is not null or undefined
        if (did === null || did === undefined) {
            throw new Error('Required parameter did was null or undefined when calling schuelerSidErgebnisseDidGet.');
        }
        // verify required parameter 'sid' is not null or undefined
        if (sid === null || sid === undefined) {
            throw new Error('Required parameter sid was null or undefined when calling schuelerSidErgebnisseDidGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Ergebnisse eines Schuelers anzuzeigen
     * 
     * @param sid Schueler-ID
     */
    public schuelerSidErgebnisseGetWithHttpInfo(sid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schueler/${sid}/ergebnisse'
                    .replace('${' + 'sid' + '}', String(sid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sid' is not null or undefined
        if (sid === null || sid === undefined) {
            throw new Error('Required parameter sid was null or undefined when calling schuelerSidErgebnisseGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Schueler abrufen
     * 
     * @param sid Schueler-ID
     */
    public schuelerSidGetWithHttpInfo(sid: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/schueler/${sid}/'
                    .replace('${' + 'sid' + '}', String(sid));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sid' is not null or undefined
        if (sid === null || sid === undefined) {
            throw new Error('Required parameter sid was null or undefined when calling schuelerSidGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
